{#
Шаблон README файла для сервисов
Для всех остальных типов проектов используйте файл: [README.example.md](../common/README.md.twig)
#}

# Сервис {{ service_name }}

## Краткое описание

{{ short_description }}
{#
Пример: Проект Skyeng, который отвечает за расписание занятий между студентами школы и преподавателями.
#}

## Ответственные

- Code Owner: {{ code_owner }}
- Product Owner: {{ product_owner }}
- Команда: {{ team }}

{#
Как заполнять:
  Code Owner (владалец кода/ответственный разработчик):
    * Описание роли: https://confluence.skyeng.ru/pages/viewpage.action?pageId=25406034
  Product Owner (владелец продукта/менеджер продукта):
    * Описание роли: https://confluence.skyeng.ru/pages/viewpage.action?pageId=25413321
  Команда, с точки зрения орг. структуры (опционально):
    * Список команд тут: https://devjira.skyeng.ru/secure/insight/search?filter=4&schema=1
#}

## Slack-каналы

{% for slack_channel in slack_channels %}
    - {{ slack_channels|e }}
{% endfor %}

{#
Пример:
    - #teachers-dev
    - #teachers-alerts
    - #teachers-info
#}

## URL на проде

{{ service_prod_url }}

## Ссылка на общую документацию

{{ doc_url }}
{#Пример: https://confluence.skyeng.ru/display/AUTH#}

## Ссылка на документацию апи

{{ api_doc_url }}
{#Пример: https://api.timetable.skyeng.ru/api/doc#}

## Ссылка на NewRelic

{{ newrelic_url }}
{#Пример: https://rpm.newrelic.com/accounts/1471826/applications/132812801#}

## Ссылка на sentry

{{ sentry_url }}
{#Пример: https://sentry.skyeng.tech/skyeng/id/#}

## Технологический стек

{{ tech_stack }}
{#
Пример:

* Код: PHP7.1, Symfony 4.2.
* База: PostgreSQL.
* Деплой: Jenkins.
#}

## Клиентские SDK

{% for integrations in integration %}
* {{ integrations|e }}
{% endfor %}
{#
Пример:

* https://github.com/skyeng/id-bundle - для проектов на Symfony 3.4+
* https://github.com/skyeng/id-yii-module - для проектов на Yii 1
* https://github.com/skyeng/id-client - для прочих php-приложений
#}

## Описание логики и границы сервиса

{{ tech_description }}
{#
Пример:
Задача сервиса: создавать и управлять расписанием занятий учеников и отслеживать жизненный цикл урока.
Сервис хранит в собственной базе список учеников с их
предпочтениями. Использует api сервиса tramway для получения списка преподавателей с метаданными,
определяющими пожелания учителей в контексте поиска соответствия между учителями и учениками.
Хранит в собственной базе результаты проведения всех уроков.
#}

## Метрики и дашборды

{#
Пример:

* [График 500 ошибок](https://dashboard.skyeng.link/d/nDK1uYDZz/balancer-dashboard?orgId=1&refresh=10s)
* [Vimbox: Video call stabilization](https://app.redash.io/skyeng/dashboard/vimbox-video-call-stabilization)
#}

## Деплой

...

## Внутренние соглашения

...

## Стейджинг

...

{#Далее опционально на усмотрение команды в произвольной форме:#}
{#Технические регламенты, стандарты кодирования, гайды, внутренние документы, описание деплоя и ссылки на пайплайны#}


